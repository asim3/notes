..title..
Kubernetes

..link.. kubernetes/settings.txt
..


..sub_title..
user management

..text..
daemonset
..code..
sudo kubectl get ds --all-namespaces


..code..
sudo kubectl get role
sudo kubectl get rolebinding
sudo kubectl get clusterrole
sudo kubectl get clusterrolebinding


..text..
Role
..code..
nano my_role.yml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: role-nickname
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

..code..
nano my_role_binding.yml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: role-binding-nickname
  namespace: default
subjects:
# You can specify more than one "subject"
- kind: User
  name: jane # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role
  name: role-nickname
  apiGroup: rbac.authorization.k8s.io


..text..
ClusterRole
..code..
nano my_cluster_role.yml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: cluster-role-nickname
rules:
- apiGroups: [""]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]


..text..
ClusterRoleBinding
..code..
nano my_cluster_role_binding.yml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-secrets
  # The namespace of the RoleBinding determines where the permissions are granted.
  # This only grants permissions within the "development" namespace.
  namespace: development
subjects:
- kind: User
  name: dave
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: cluster-role-nickname
  apiGroup: rbac.authorization.k8s.io


..code..
sudo kubectl apply -f my_role.yml
sudo kubectl apply -f my_role_binding.yml

sudo kubectl apply -f my_cluster_role.yml
sudo kubectl apply -f my_cluster_role_binding.yml


#--- !!!!


..text..
service account
..code..
sudo kubectl get sa

nano my_service_file.yml
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-nickname
  namespace: namespace-nickname


..code..
sudo kubectl create -f my_service_file.yml

sudo kubectl get      sa -n namespace-nickname
sudo kubectl describe sa service-nickname -n namespace-nickname
sudo kubectl delete   sa service-nickname -n namespace-nickname


..code..
apiVersion: v1
kind: Pod
metadata:
  name: pod-nickname
  namespace: namespace-nickname
spec: 
  serviceAccountName: service-nickname 
  containers:
  - # ...